사전은의 모든 문자열은 N개의 a 와 M개의 z 로 이루어져있다.
모든 문자열은 알파벳 순
K번째 문자열 찾기

예제1)
입력 : 2 2 2
출력 : azaz
전체 문자열
aazz
azaz
azza
zaaz
zaza
zzaa

해결1 : 조합으로 모든 문자열을 찾아가다 K번째 문자열을 리턴한다.

구현내용
1. 사용한 a의 개수와 z의 개수를 파악할 수 있는 변수 선언->N,M 으로 이용
2. 조합으로 만들어지는 배열을 저장할 수 있는 tmp배열 선언
3. a를 사용할 수 있다면 a부터 사용하고 a를 사용할 수 없다면 z를 넣으면서 진행

결과 : 시간초과
----------코드----------
package baekjoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static int N, M, K, answerCount = 0;
	static char[] arr;
	static char[] answerArr;

	public static void main(String[] args) throws IOException {
		inputValues();
		makeStrings(0);
		System.out.println((answerArr == null) ? -1 : arrToString(answerArr));
	}

	private static String arrToString(char[] arr) {
		StringBuilder answer = new StringBuilder();
		for (int i = 0; i < arr.length; i++) {
			answer.append(arr[i]);
		}
		return answer.toString();
	}

	private static void makeStrings(int cur) {
		if (answerCount == K) {
			return;
		}
		if (cur == arr.length) {
			answerCount++;
			if (answerCount == K) {
				answerArr = Arrays.copyOf(arr, arr.length);
			}
			return;
		}
		if (N != 0) {
			arr[cur] = 'a';
			N--;
			makeStrings(cur + 1);
			N++;
		}
		if (M != 0) {
			arr[cur] = 'z';
			M--;
			makeStrings(cur + 1);
			M++;
		}
	}

	private static void inputValues() throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
		N = Integer.parseInt(tokenizer.nextToken());
		M = Integer.parseInt(tokenizer.nextToken());
		K = Integer.parseInt(tokenizer.nextToken());
		arr = new char[N + M];
	}
}


해결2 : 다이나믹프로그래밍을 사용 dp[x][y]=문자 a 를 x개 문자 z를 y개 사용해서 만들 수 있는 모든 경의 수를 저장
점화식을 이용한다 dp[x][y]=dp[x-1][y]+dp[x][y-1]
모든 dp 배열을 저장했다면 이 배열을 이용해서 K번째의 문자열을 찾아나간다
만약 5번째 문자열을 찾는데 dp[N][M]=20 이라면 dp[N-1][M] 값보다 5가 큰지 작은지를 확인한다면 첫번째 자리에 a가오는지 z 가 오는지 알 수 있다.
결과 : 정답
----------코드----------
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static int N, M, K, answerCount = 0;
	static char[] arr;
	static int[][] dp;
	static StringBuilder answer = new StringBuilder();

	public static void main(String[] args) throws IOException {
		inputValues();
		makeDp(N, M);
		int realK=K;
		makeAnswer(N, M);
		System.out.println((realK> dp[N][M]) ? -1 : answer);
	}

	private static void makeAnswer(int countA, int countZ) {
		if (countA - 1 >= 0 && (K <= dp[countA - 1][countZ] || countZ == 0)) {
			answer.append('a');
			makeAnswer(countA - 1, countZ);
		} else if (countZ - 1 >= 0 && countA - 1 >= 0) {
			answer.append('z');
			K -= dp[countA - 1][countZ];
			makeAnswer(countA, countZ - 1);
		} else if (countZ - 1 >= 0 && countA == 0) {
			answer.append('z');
			makeAnswer(countA, countZ - 1);
		}
	}

	private static int makeDp(int countA, int countZ) {
		if (countA == 0 || countZ == 0) {
			return dp[countA][countZ] = 1;
		}
		if (dp[countA][countZ] != 0) {
			return dp[countA][countZ];
		}
		dp[countA][countZ] = makeDp(countA - 1, countZ) + makeDp(countA, countZ - 1);
		return dp[countA][countZ] = (dp[countA][countZ] >= 1000000000) ? 1000000000 : dp[countA][countZ];
	}

	private static void inputValues() throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
		N = Integer.parseInt(tokenizer.nextToken());
		M = Integer.parseInt(tokenizer.nextToken());
		K = Integer.parseInt(tokenizer.nextToken());
		arr = new char[N + M];
		dp = new int[N + 1][M + 1];
	}
}


